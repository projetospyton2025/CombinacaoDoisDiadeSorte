o total de cobinação com 7 digitos é distribuido desta forma:
Total de combinações: 120
inicio com 0 é igual a 84
inicio com 1 é igual a 28
inicio com 2 é igual a 7
inicio com 3 é igual a 1

e 
84+28+7+1 é igual a 120 ok até ai tudo bem...

estes são as combinações

0,1,2,3,4,5,6	0,1,2,3,4,5,7	0,1,2,3,4,5,8	0,1,2,3,4,5,9	0,1,2,3,4,6,7	0,1,2,3,4,6,8
0,1,2,3,4,6,9	0,1,2,3,4,7,8	0,1,2,3,4,7,9	0,1,2,3,4,8,9	0,1,2,3,5,6,7	0,1,2,3,5,6,8
0,1,2,3,5,6,9	0,1,2,3,5,7,8	0,1,2,3,5,7,9	0,1,2,3,5,8,9	0,1,2,3,6,7,8	0,1,2,3,6,7,9
0,1,2,3,6,8,9	0,1,2,3,7,8,9	0,1,2,4,5,6,7	0,1,2,4,5,6,8	0,1,2,4,5,6,9	0,1,2,4,5,7,8
0,1,2,4,5,7,9	0,1,2,4,5,8,9	0,1,2,4,6,7,8	0,1,2,4,6,7,9	0,1,2,4,6,8,9	0,1,2,4,7,8,9
0,1,2,5,6,7,8	0,1,2,5,6,7,9	0,1,2,5,6,8,9	0,1,2,5,7,8,9	0,1,2,6,7,8,9	0,1,3,4,5,6,7
0,1,3,4,5,6,8	0,1,3,4,5,6,9	0,1,3,4,5,7,8	0,1,3,4,5,7,9	0,1,3,4,5,8,9	0,1,3,4,6,7,8
0,1,3,4,6,7,9	0,1,3,4,6,8,9	0,1,3,4,7,8,9	0,1,3,5,6,7,8	0,1,3,5,6,7,9	0,1,3,5,6,8,9
0,1,3,5,7,8,9	0,1,3,6,7,8,9	0,1,4,5,6,7,8	0,1,4,5,6,7,9	0,1,4,5,6,8,9	0,1,4,5,7,8,9
0,1,4,6,7,8,9	0,1,5,6,7,8,9	0,2,3,4,5,6,7	0,2,3,4,5,6,8	0,2,3,4,5,6,9	0,2,3,4,5,7,8
0,2,3,4,5,7,9	0,2,3,4,5,8,9	0,2,3,4,6,7,8	0,2,3,4,6,7,9	0,2,3,4,6,8,9	0,2,3,4,7,8,9
0,2,3,5,6,7,8	0,2,3,5,6,7,9	0,2,3,5,6,8,9	0,2,3,5,7,8,9	0,2,3,6,7,8,9	0,2,4,5,6,7,8
0,2,4,5,6,7,9	0,2,4,5,6,8,9	0,2,4,5,7,8,9	0,2,4,6,7,8,9	0,2,5,6,7,8,9	0,3,4,5,6,7,8
0,3,4,5,6,7,9	0,3,4,5,6,8,9	0,3,4,5,7,8,9	0,3,4,6,7,8,9	0,3,5,6,7,8,9	0,4,5,6,7,8,9
1,2,3,4,5,6,7	1,2,3,4,5,6,8	1,2,3,4,5,6,9	1,2,3,4,5,7,8	1,2,3,4,5,7,9	1,2,3,4,5,8,9
1,2,3,4,6,7,8	1,2,3,4,6,7,9	1,2,3,4,6,8,9	1,2,3,4,7,8,9	1,2,3,5,6,7,8	1,2,3,5,6,7,9
1,2,3,5,6,8,9	1,2,3,5,7,8,9	1,2,3,6,7,8,9	1,2,4,5,6,7,8	1,2,4,5,6,7,9	1,2,4,5,6,8,9
1,2,4,5,7,8,9	1,2,4,6,7,8,9	1,2,5,6,7,8,9	1,3,4,5,6,7,8	1,3,4,5,6,7,9	1,3,4,5,6,8,9
1,3,4,5,7,8,9	1,3,4,6,7,8,9	1,3,5,6,7,8,9	1,4,5,6,7,8,9   2,3,4,5,6,7,8	2,3,4,5,6,7,9	
2,3,4,5,6,8,9	2,3,4,5,7,8,9	2,3,4,6,7,8,9	2,3,5,6,7,8,9
2,4,5,6,7,8,9	3,4,5,6,7,8,9

preciso que seja agrupada de dois em dois  para trazer quantas combinações é possivel 
veja

vide arquivo tabela excel
vide arquivo tabela excel
vide arquivo tabela excel
vide arquivo tabela excel
vide arquivo tabela excel

AO OBSERVAR A FIGURA 3-img.jpg VC VAI TER A NOÇÃO DE QUE EU QUERO.
USE A MESMA IDEIA DE SEPARAR AS INFORMAÇÕES DA DIV
CRIANDO ARQUIVOS SEPARADOS... COMO FEZ ANTERIORMENTE...
FAÇA ISSO PARA TODAS AS COMBINAÇÕES DE DIGITOS.. 
0.1.2.3.4.5.6.7.8.9

A IDEIA AQUI É OBTER AUTOMATICAMENTE ESTES NUMEROS SEM CLICAR EM SEQUER UM BOTÃO.. 




0, 1, 2, 3, 4, 5, 6	35
0, 1, 2, 3, 4, 5, 7	35
0, 1, 2, 3, 4, 5, 8	35
0, 1, 2, 3, 4, 5, 9	35
0, 1, 2, 3, 4, 6, 7	35
0, 1, 2, 3, 4, 6, 8	35
0, 1, 2, 3, 4, 6, 9	35
0, 1, 2, 3, 4, 7, 8	35
0, 1, 2, 3, 4, 7, 9	35
0, 1, 2, 3, 4, 8, 9	35
0, 1, 2, 3, 5, 6, 7	35
0, 1, 2, 3, 5, 6, 8	35
0, 1, 2, 3, 5, 6, 9	35
0, 1, 2, 3, 5, 7, 8	35
0, 1, 2, 3, 5, 7, 9	35
0, 1, 2, 3, 5, 8, 9	35
0, 1, 2, 3, 6, 7, 8	35
0, 1, 2, 3, 6, 7, 9	35
0, 1, 2, 3, 6, 8, 9	35
0, 1, 2, 3, 7, 8, 9	35
0, 1, 2, 4, 5, 6, 7	35
0, 1, 2, 4, 5, 6, 8	35
0, 1, 2, 4, 5, 6, 9	35
0, 1, 2, 4, 5, 7, 8	35
0, 1, 2, 4, 5, 7, 9	35
0, 1, 2, 4, 5, 8, 9	35
0, 1, 2, 4, 6, 7, 8	35
0, 1, 2, 4, 6, 7, 9	35
0, 1, 2, 4, 6, 8, 9	35
0, 1, 2, 4, 7, 8, 9	35
0, 1, 2, 5, 6, 7, 8	35
0, 1, 2, 5, 6, 7, 9	35
0, 1, 2, 5, 6, 8, 9	35
0, 1, 2, 5, 7, 8, 9	35
0, 1, 2, 6, 7, 8, 9	35
0, 1, 3, 4, 5, 6, 7	35
0, 1, 3, 4, 5, 6, 8	35
0, 1, 3, 4, 5, 6, 9	35
0, 1, 3, 4, 5, 7, 8	35
0, 1, 3, 4, 5, 7, 9	35
0, 1, 3, 4, 5, 8, 9	35
0, 1, 3, 4, 6, 7, 8	35
0, 1, 3, 4, 6, 7, 9	35
0, 1, 3, 4, 6, 8, 9	35
0, 1, 3, 4, 7, 8, 9	35
0, 1, 3, 5, 6, 7, 8	35
0, 1, 3, 5, 6, 7, 9	35
0, 1, 3, 5, 6, 8, 9	35
0, 1, 3, 5, 7, 8, 9	35
0, 1, 3, 6, 7, 8, 9	35
0, 1, 4, 5, 6, 7, 8	35
0, 1, 4, 5, 6, 7, 9	35
0, 1, 4, 5, 6, 8, 9	35
0, 1, 4, 5, 7, 8, 9	35
0, 1, 4, 6, 7, 8, 9	35
0, 1, 5, 6, 7, 8, 9	35
0, 2, 3, 4, 5, 6, 7	35
0, 2, 3, 4, 5, 6, 8	35
0, 2, 3, 4, 5, 6, 9	35
0, 2, 3, 4, 5, 7, 8	35
0, 2, 3, 4, 5, 7, 9	35
0, 2, 3, 4, 5, 8, 9	35
0, 2, 3, 4, 6, 7, 8	35


Diretório: J:\Meu Drive\ProjetosPython\Loterias\Combinacoes\Combinacao-II


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        03/03/2025     10:59                static
d-----        03/03/2025     10:58                requisitos
d-----        03/03/2025     12:12                templates
d-----        03/03/2025     11:02                venv
------        03/03/2025     10:51           1096 LICENSE
------        03/03/2025     10:51             15 README.md
------        03/03/2025     11:31            356 app.py
------        03/03/2025     11:04             29 requirements.txt

from flask import Flask, render_template, jsonify, request
import os
import math
from itertools import combinations

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/tabela_combinacoes')
def tabela_combinacoes():
    return render_template('tabela_combinacoes.html')

@app.route('/api/combinacoes/<int:tamanho>')
def get_combinacoes(tamanho):
    # Verificar se o tamanho está dentro dos limites permitidos
    if tamanho < 1 or tamanho > 10:
        return jsonify({"error": "Tamanho inválido. Deve ser entre 1 e 10."}), 400
    
    # Gerar todas as combinações possíveis
    digitos = list(range(10))  # dígitos de 0 a 9
    todas_combinacoes = list(combinations(digitos, tamanho))
    
    # Converter combinações para formato de lista
    combinacoes_formatadas = [list(comb) for comb in todas_combinacoes]
    
    # Calcular total
    total = len(combinacoes_formatadas)
    
    # Agrupar por primeiro dígito
    por_primeiro_digito = {}
    for i in range(10):
        por_primeiro_digito[i] = [comb for comb in combinacoes_formatadas if comb[0] == i]
    
    return jsonify({
        "tamanho": tamanho,
        "total": total,
        "por_primeiro_digito": por_primeiro_digito
    })

# Função para calcular o número de combinações de n elementos tomados k a k
def calcular_combinacoes(n, k):
    return math.comb(n, k)

# Função para calcular o número de agrupamentos com duas dezenas
def calcular_agrupamentos_duas_dezenas(tamanho):
    # Para agrupamentos de dois dígitos (0-9), temos 10 escolher 2 = 45 possibilidades
    if tamanho <= 2:
        return tamanho  # Para tamanho 1, apenas 1 agrupamento, para 2, são 2 agrupamentos
    else:
        # Para tamanhos maiores, calculamos quantas combinações de 2 dígitos temos dos 10 dígitos
        return calcular_combinacoes(10, 2)

# Função para calcular combinações de agrupamento em 2
def calcular_combinacoes_agrupadas(tamanho):
    if tamanho <= 2:
        return tamanho
    # Para tamanhos maiores, calculamos com base no número de combinações possíveis dentro de cada agrupamento
    agrupamentos = calcular_agrupamentos_duas_dezenas(tamanho)
    combinacoes_por_agrupamento = calcular_combinacoes(tamanho, 2)
    return agrupamentos * combinacoes_por_agrupamento

@app.route('/api/estatisticas')
def get_estatisticas():
    # Calcular o número de combinações para cada tamanho de 1 a 10
    estatisticas = []
    n = 10  # número total de dígitos (0-9)
    
    for k in range(1, n + 1):
        total_combinacoes = calcular_combinacoes(n, k)
        
        # Calcular os agrupamentos com duas dezenas
        agrupamentos_duas_dezenas = calcular_agrupamentos_duas_dezenas(k)
        
        # Calcular combinações destes agrupamentos
        combinacoes_agrupadas = calcular_combinacoes_agrupadas(k)
        
        estatisticas.append({
            "tamanho": k,
            "total": total_combinacoes,
            "agrupamentos_duas_dezenas": agrupamentos_duas_dezenas,
            "combinacoes_agrupadas": combinacoes_agrupadas
        })
    
    return jsonify(estatisticas)

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=True)
	
	<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerador de Combinações de Dígitos</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/modal.css') }}">
</head>
<body>

<!--
		<div class="instrucaoes">
				<h2>Instruções de uso:</h2>
				<ol>
				  <li>Selecione o tamanho do grupo (1-10)</li>
				  <li>Clique em "Gerar Combinações"</li>
				  <li>Visualize as combinações geradas</li>
				  <li>Clique em "Ver Estatísticas" para um resumo rápido</li>
				  <li>Ou clique em "Ver Tabela de Estatísticas" para a tabela completa</li>
				</ol>

				<h2>Tabela de Estatísticas:</h2>

					<ul>
					  <li>Visualize as estatísticas completas para todos os tamanhos</li>
					  <li>Clique em qualquer combinação para ver detalhes em um modal</li>
					  <li>Selecione um tamanho específico e clique em "Atualizar Tabela" para focar nesse tamanho</li>
					  <li>Clique em "Voltar ao Gerador" para retornar à página principal</li>
					</ul>
		</div><br />
-->



    <div class="container">
        <h1>Gerador de Combinações de Dígitos</h1>
        <div class="controls">
            <label for="tamanho">Tamanho do grupo:</label>
            <select id="tamanho">
                <option value="1">1 dígito</option>
                <option value="2">2 dígitos</option>
                <option value="3" selected>3 dígitos</option>
                <option value="4">4 dígitos</option>
                <option value="5">5 dígitos</option>
                <option value="6">6 dígitos</option>
                <option value="7">7 dígitos</option>
                <option value="8">8 dígitos</option>
                <option value="9">9 dígitos</option>
                <option value="10">10 dígitos</option>
            </select>
            <button id="gerar">Gerar Combinações</button>
            <button id="ver-estatisticas" disabled>Ver Estatísticas</button>
        </div>
        
        <div class="results" id="results">
            <h2 id="resultado-titulo"></h2>
            <div class="info" id="total-info"></div>
            <div class="combs-container" id="combinacoes"></div>
            <div class="pagination">
                <button id="anterior" disabled>Anterior</button>
                <button id="proximo" disabled>Próximo</button>
            </div>
            <div class="info" id="pagina-info"></div>
        </div>
    </div>

    <!-- Nova div separada para o link da tabela estatística -->
    <div class="tabela-link-container">
        <h3>Deseja ver a tabela completa de estatísticas?</h3>
        <a href="/tabela_combinacoes" class="tabela-link">Ver Tabela de Estatísticas</a>
    </div>

    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
	<script src="{{ url_for('static', filename='js/modal.js') }}"></script>
    <footer>Feito por: <i>Márcio Fernando Maia -  Todos os direitos reservado - 2025</i></footer>
</body>
</html>

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tabela de Combinações de Dígitos</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/table_style.css') }}">
</head>
<body>
    <div class="tabela-container">
        <div class="header-container">
            <h1 class="title">TOTAIS</h1>
            <h2 class="subtitle">Total de combinações</h2>
        </div>
        
        <div class="table-responsive">
            <table id="tabela-estatisticas" class="tabela-estatisticas">
                <thead>
                    <tr>
                        <th>Combinações com</th>
                        <th>Dígitos</th>
                        <th>Agrupamento com duas dezenas</th>
                        <th>Combinações destas dezenas (agrupada em 2)</th>
                        <th>0</th>
                        <th>1</th>
                        <th>2</th>
                        <th>3</th>
                        <th>4</th>
                        <th>...</th>
                    </tr>
                </thead>
                <tbody id="estatisticas-corpo">
                    <!-- Dados serão preenchidos via JavaScript -->
                </tbody>
            </table>
        </div>
        
        <div class="controls">
            <label for="tamanho-tabela">Selecione o tamanho para ver as combinações:</label>
            <select id="tamanho-tabela">
                <option value="1">1 dígito</option>
                <option value="2">2 dígitos</option>
                <option value="3" selected>3 dígitos</option>
                <option value="4">4 dígitos</option>
                <option value="5">5 dígitos</option>
                <option value="6">6 dígitos</option>
                <option value="7">7 dígitos</option>
                <option value="8">8 dígitos</option>
                <option value="9">9 dígitos</option>
                <option value="10">10 dígitos</option>
            </select>
            <button id="atualizar-tabela">Atualizar Tabela</button>
            <a href="/" class="link-button">Voltar ao Gerador</a>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/tabela.js') }}"></script>
    <footer>Feito por: <i>Márcio Fernando Maia - Todos os direitos reservado - 2025</i></footer>
</body>
</html>
/* Estilos para o modal */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background-color: white;
    border-radius: 8px;
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.modal-content.modal-large {
    max-width: 1200px;
    width: 95%;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background-color: #2196F3;
    color: white;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    position: sticky;
    top: 0;
    z-index: 10;
}

.modal-close {
    background: none;
    border: none;
    font-size: 24px;
    color: white;
    cursor: pointer;
}

.modal-body {
    padding: 20px;
}

.combo-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

.combo-table td {
    padding: 8px;
    border: 1px solid #ddd;
    text-align: center;
    font-family: monospace;
    background-color: #f9f9f9;
}

.combo-table tr:nth-child(even) td {
    background-color: #f0f7ff;
}

/* Estilo para células clicáveis */
.combo-cell {
    cursor: pointer;
    transition: background-color 0.2s;
}

.combo-cell:hover {
    background-color: #e3f2fd;
    text-decoration: underline;
}

/* Estilo para a navegação por tabs */
.tabs-container {
    margin-top: 20px;
}

.tabs-nav {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    margin-bottom: 15px;
    border-bottom: 1px solid #ddd;
    padding-bottom: 10px;
}

.tab-btn {
    padding: 8px 15px;
    background-color: #f2f2f2;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s;
}

.tab-btn:hover {
    background-color: #e0e0e0;
}

.tab-btn.active {
    background-color: #2196F3;
    color: white;
    border-color: #0b7dda;
}

.tab-content {
    display: none;
}

.tab-content:first-child {
    display: block;
}

.etc-cell {
    color: #2196F3;
    font-weight: bold;
}

/* Estilo para tabela de todas as combinações */
.all-combinations {
    margin-top: 20px;
}

/* Responsividade para telas menores */
@media (max-width: 768px) {
    .tabs-nav {
        justify-content: center;
    }
    
    .tab-btn {
        font-size: 14px;
        padding: 6px 10px;
    }
    
    .modal-content {
        width: 95%;
    }
    
    .combo-table td {
        padding: 5px;
        font-size: 13px;
    }
}
body {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f5f5f5;
}
h1 {
    color: #333;
    text-align: center;
}
.container {
    background-color: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.controls {
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 10px;
}
label {
    font-weight: bold;
}
select, button {
    padding: 8px 12px;
    border-radius: 4px;
    border: 1px solid #ccc;
}
button {
    background-color: #4CAF50;
    color: white;
    cursor: pointer;
    border: none;
}
button:hover {
    background-color: #45a049;
}
.results {
    margin-top: 20px;
}
.combs-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 10px;
    margin-top: 10px;
}
.comb-item {
    background-color: #e9f5ff;
    border-radius: 4px;
    padding: 8px;
    text-align: center;
    font-family: monospace;
    border: 1px solid #ccc;
}
.pagination {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    gap: 10px;
}
.pagination button {
    width: 100px;
}
.info {
    text-align: center;
    margin-top: 10px;
    color: #666;
}
footer {
    color: #161515;
    text-align: center;
    padding: 5px;
    margin-bottom: auto;
    margin-top: 10px; /* Espaço acima do rodapé */
}
/* Estilos para o link da tabela */
.tabela-link-container {
    max-width: 800px;
    margin: 20px auto;
    padding: 15px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    text-align: center;
}

.tabela-link-container h3 {
    color: #333;
    margin-top: 0;
    margin-bottom: 15px;
}

.tabela-link {
    display: inline-block;
    padding: 10px 20px;
    background-color: #2196F3;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-weight: bold;
    transition: background-color 0.3s;
}

.tabela-link:hover {
    background-color: #0b7dda;
}
/* Estilos para o modal */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background-color: white;
    border-radius: 8px;
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background-color: #2196F3;
    color: white;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
}

.modal-close {
    background: none;
    border: none;
    font-size: 24px;
    color: white;
    cursor: pointer;
}

.modal-body {
    padding: 20px;
}

.combo-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

.combo-table td {
    padding: 8px;
    border: 1px solid #ddd;
    text-align: center;
    font-family: monospace;
    background-color: #f9f9f9;
}

.combo-table tr:nth-child(even) td {
    background-color: #f0f7ff;
}

/* Estilo para células clicáveis */
.combo-cell.clickable {
    cursor: pointer;
    transition: background-color 0.2s;
}

.combo-cell.clickable:hover {
    background-color: #e3f2fd;
    text-decoration: underline;
}
.instrucaoes{
    background-color: #f9f9f9; /* Fundo cinza claro */
    border-radius: 12px; /* Bordas arredondadas */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra leve */
    padding: 20px; /* Espaçamento interno */
    text-align: left; /* Centraliza o texto */
    font-family: Arial, sans-serif; /* Fonte padrão */
    color: #333; /* Cor do texto */
    line-height: 35px;
}
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f5f5f5;
}

.tabela-container {
    max-width: 1200px;
    margin: 0 auto;
    background-color: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.header-container {
    text-align: center;
    margin-bottom: 20px;
    border-bottom: 1px solid #eee;
    padding-bottom: 15px;
}

.title {
    font-size: 24px;
    color: #000;
    margin-bottom: 10px;
    text-transform: uppercase;
}

.subtitle {
    font-size: 20px;
    color: #333;
    margin-top: 0;
}

.table-responsive {
    overflow-x: auto;
    margin-bottom: 20px;
}

.tabela-estatisticas {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    font-size: 14px;
}

.tabela-estatisticas th {
    background-color: #f2f2f2;
    color: #333;
    padding: 10px;
    border: 1px solid #ddd;
    text-align: center;
}

.tabela-estatisticas th:first-child {
    background-color: #000;
    color: white;
}

.tabela-estatisticas td {
    padding: 8px;
    border: 1px solid #ddd;
    text-align: center;
    vertical-align: middle;
}

.tabela-estatisticas tr:nth-child(even) {
    background-color: #f9f9f9;
}

.tabela-estatisticas tr:hover {
    background-color: #f0f7ff;
}

/* Estilos para combos específicos */
.combo-cell {
    font-family: monospace;
    white-space: nowrap;
}

.question-mark {
    color: #999;
    font-weight: bold;
}

.controls {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    align-items: center;
    margin-top: 20px;
    padding: 15px;
    background-color: #f9f9f9;
    border-radius: 8px;
}

.controls label {
    font-weight: bold;
}

.controls select, 
.controls button,
.controls .link-button {
    padding: 8px 12px;
    border-radius: 4px;
    border: 1px solid #ccc;
}

.controls button,
.controls .link-button {
    background-color: #4CAF50;
    color: white;
    cursor: pointer;
    border: none;
    text-decoration: none;
    text-align: center;
    display: inline-block;
}

.controls .link-button {
    background-color: #2196F3;
}

.controls button:hover,
.controls .link-button:hover {
    opacity: 0.9;
}

footer {
    color: #161515;
    text-align: center;
    padding: 5px;
    margin-top: 30px;
    border-top: 1px solid #ddd;
}

/* Estilos para telas menores */
@media (max-width: 768px) {
    .tabela-estatisticas {
        font-size: 12px;
    }
    
    .tabela-estatisticas th,
    .tabela-estatisticas td {
        padding: 6px 4px;
    }
    
    .controls {
        flex-direction: column;
        align-items: stretch;
    }
    
    .controls select, 
    .controls button,
    .controls .link-button {
        width: 100%;
        margin: 5px 0;
    }
}
// Elementos do DOM
const tamanhoSelect = document.getElementById('tamanho');
const gerarBtn = document.getElementById('gerar');
const resultadoTitulo = document.getElementById('resultado-titulo');
const totalInfo = document.getElementById('total-info');
const combinacoesContainer = document.getElementById('combinacoes');
const anteriorBtn = document.getElementById('anterior');
const proximoBtn = document.getElementById('proximo');
const paginaInfo = document.getElementById('pagina-info');
const verEstatisticasBtn = document.getElementById('ver-estatisticas');

// Variáveis para controle da paginação
let todasCombinacoes = [];
let paginaAtual = 1;
const itensPorPagina = 30;

// Função para gerar combinações
function gerarCombinacoes(conjunto, tamanho) {
    const combinacoes = [];
    
    function combinar(inicio, atual) {
        if (atual.length === tamanho) {
            combinacoes.push([...atual]);
            return;
        }
        
        for (let i = inicio; i < conjunto.length; i++) {
            atual.push(conjunto[i]);
            combinar(i + 1, atual);
            atual.pop();
        }
    }
    
    combinar(0, []);
    return combinacoes;
}

// Função para mostrar combinações na página atual
function mostrarCombinacoes() {
    combinacoesContainer.innerHTML = '';
    
    const inicio = (paginaAtual - 1) * itensPorPagina;
    const fim = Math.min(inicio + itensPorPagina, todasCombinacoes.length);
    
    for (let i = inicio; i < fim; i++) {
        const combDiv = document.createElement('div');
        combDiv.classList.add('comb-item');
        combDiv.textContent = todasCombinacoes[i].join(',');
        combinacoesContainer.appendChild(combDiv);
    }
    
    // Atualizar informações de paginação
    paginaInfo.textContent = `Página ${paginaAtual} de ${Math.ceil(todasCombinacoes.length / itensPorPagina)}`;
    anteriorBtn.disabled = paginaAtual === 1;
    proximoBtn.disabled = paginaAtual === Math.ceil(todasCombinacoes.length / itensPorPagina);
    
    // Habilitar o botão de estatísticas quando houver combinações
    if (verEstatisticasBtn) {
        verEstatisticasBtn.disabled = todasCombinacoes.length === 0;
    }
}

// Função para criar popup de estatísticas rápidas
function mostrarEstatisticasRapidas() {
    if (todasCombinacoes.length === 0) {
        alert('Gere combinações primeiro para ver estatísticas.');
        return;
    }
    
    const tamanho = parseInt(tamanhoSelect.value);
    
    // Agrupar combinações por primeiro dígito
    const porPrimeiroDigito = {};
    for (let i = 0; i < 10; i++) {
        porPrimeiroDigito[i] = todasCombinacoes.filter(comb => comb[0] === i);
    }
    
    // Criar o popup
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';
    
    // Cabeçalho do popup
    const modalHeader = document.createElement('div');
    modalHeader.className = 'modal-header';
    
    const modalTitle = document.createElement('h2');
    modalTitle.textContent = `Estatísticas para ${tamanho} dígito(s)`;
    
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '×';
    closeBtn.className = 'modal-close';
    closeBtn.addEventListener('click', () => {
        document.body.removeChild(modalOverlay);
    });
    
    modalHeader.appendChild(modalTitle);
    modalHeader.appendChild(closeBtn);
    
    // Corpo do popup
    const modalBody = document.createElement('div');
    modalBody.className = 'modal-body';
    
    // Adicionar resumo das estatísticas
    const estatisticasDiv = document.createElement('div');
    estatisticasDiv.className = 'estatisticas-resumo';
    
    // Total de combinações
    const totalDiv = document.createElement('div');
    totalDiv.className = 'estatistica-item';
    totalDiv.innerHTML = `<strong>Total de combinações:</strong> ${todasCombinacoes.length}`;
    estatisticasDiv.appendChild(totalDiv);
    
    // Combinações por primeiro dígito
    const porDigitoDiv = document.createElement('div');
    porDigitoDiv.className = 'estatistica-por-digito';
    porDigitoDiv.innerHTML = '<strong>Combinações por primeiro dígito:</strong>';
    
    const digitsTable = document.createElement('table');
    digitsTable.className = 'digitos-table';
    
    // Cabeçalho da tabela
    const headerRow = document.createElement('tr');
    for (let i = 0; i < 10; i++) {
        const th = document.createElement('th');
        th.textContent = i;
        headerRow.appendChild(th);
    }
    digitsTable.appendChild(headerRow);
    
    // Valores
    const valuesRow = document.createElement('tr');
    for (let i = 0; i < 10; i++) {
        const td = document.createElement('td');
        td.textContent = porPrimeiroDigito[i] ? porPrimeiroDigito[i].length : 0;
        valuesRow.appendChild(td);
    }
    digitsTable.appendChild(valuesRow);
    
    porDigitoDiv.appendChild(digitsTable);
    estatisticasDiv.appendChild(porDigitoDiv);
    
    // Adicionar link para estatísticas completas
    const linkCompleto = document.createElement('div');
    linkCompleto.className = 'link-completo';
    const linkBtn = document.createElement('a');
    linkBtn.href = '/tabela_combinacoes';
    linkBtn.className = 'btn-link';
    linkBtn.textContent = 'Ver Tabela Completa de Estatísticas';
    linkCompleto.appendChild(linkBtn);
    
    modalBody.appendChild(estatisticasDiv);
    modalBody.appendChild(linkCompleto);
    
    // Adicionar ao modal
    modalContent.appendChild(modalHeader);
    modalContent.appendChild(modalBody);
    modalOverlay.appendChild(modalContent);
    
    // Adicionar à página
    document.body.appendChild(modalOverlay);
}

// Event listeners
gerarBtn.addEventListener('click', () => {
    const tamanho = parseInt(tamanhoSelect.value);
    const digitos = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    
    // Gerar todas as combinações
    todasCombinacoes = gerarCombinacoes(digitos, tamanho);
    
    // Resetar paginação
    paginaAtual = 1;
    
    // Atualizar interface
    resultadoTitulo.textContent = `Combinações com ${tamanho} dígito(s)`;
    totalInfo.textContent = `Total de combinações: ${todasCombinacoes.length}`;
    
    // Mostrar combinações
    mostrarCombinacoes();
    
    // Também armazenar no localStorage para uso na página de estatísticas
    try {
        localStorage.setItem('ultimo_tamanho', tamanho);
    } catch (e) {
        console.error('Erro ao salvar no localStorage:', e);
    }
});

anteriorBtn.addEventListener('click', () => {
    if (paginaAtual > 1) {
        paginaAtual--;
        mostrarCombinacoes();
    }
});

proximoBtn.addEventListener('click', () => {
    if (paginaAtual < Math.ceil(todasCombinacoes.length / itensPorPagina)) {
        paginaAtual++;
        mostrarCombinacoes();
    }
});

// Verificar se o botão de estatísticas existe e adicionar evento
if (verEstatisticasBtn) {
    verEstatisticasBtn.addEventListener('click', mostrarEstatisticasRapidas);
}

// Inicializar as combinações quando a página carrega (opcional)
document.addEventListener('DOMContentLoaded', () => {
    // Adicionar botão de estatísticas se não existir no HTML
    if (!verEstatisticasBtn) {
        const estatisticasBtn = document.createElement('button');
        estatisticasBtn.id = 'ver-estatisticas';
        estatisticasBtn.textContent = 'Ver Estatísticas';
        estatisticasBtn.className = 'btn-estatisticas';
        estatisticasBtn.disabled = true;
        estatisticasBtn.addEventListener('click', mostrarEstatisticasRapidas);
        
        // Adicionar após o botão gerar
        gerarBtn.parentElement.appendChild(estatisticasBtn);
    }
    
    // Também poderíamos carregar automaticamente o mesmo tamanho da página de estatísticas
    try {
        const ultimoTamanho = localStorage.getItem('ultimo_tamanho');
        if (ultimoTamanho) {
            tamanhoSelect.value = ultimoTamanho;
        }
    } catch (e) {
        console.error('Erro ao ler do localStorage:', e);
    }
});
// Função para criar e mostrar o modal com combinações detalhadas
function mostrarModalCombinacoes(primeiroDigito, tamanho) {
    // Verificar se temos os dados de combinações
    if (!combinacoesData || combinacoesData.tamanho !== tamanho) {
        alert('Primeiro selecione o tamanho correto e clique em "Atualizar Tabela"');
        return;
    }
    
    // Obter todas as combinações para este dígito inicial
    const combsPorDigito = combinacoesData.por_primeiro_digito[primeiroDigito] || [];
    
    if (combsPorDigito.length === 0) {
        alert('Não há combinações para este dígito inicial.');
        return;
    }
    
    // Criar o modal
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';
    
    // Cabeçalho do modal
    const modalHeader = document.createElement('div');
    modalHeader.className = 'modal-header';
    
    const modalTitle = document.createElement('h2');
    modalTitle.textContent = `Combinações com ${tamanho} dígitos começando com ${primeiroDigito}`;
    
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '×';
    closeBtn.className = 'modal-close';
    closeBtn.addEventListener('click', () => {
        document.body.removeChild(modalOverlay);
    });
    
    modalHeader.appendChild(modalTitle);
    modalHeader.appendChild(closeBtn);
    
    // Conteúdo do modal
    const modalBody = document.createElement('div');
    modalBody.className = 'modal-body';
    
    const totalText = document.createElement('p');
    totalText.textContent = `Total de combinações: ${combsPorDigito.length}`;
    modalBody.appendChild(totalText);
    
    // Tabela de combinações
    const comboTable = document.createElement('table');
    comboTable.className = 'combo-table';
    
    // Criar linhas para exibir as combinações em uma grade
    const combsPerRow = 6;
    const rows = Math.ceil(combsPorDigito.length / combsPerRow);
    
    for (let i = 0; i < rows; i++) {
        const row = document.createElement('tr');
        
        for (let j = 0; j < combsPerRow; j++) {
            const index = i * combsPerRow + j;
            
            if (index < combsPorDigito.length) {
                const cell = document.createElement('td');
                cell.textContent = combsPorDigito[index].join(',');
                row.appendChild(cell);
            } else {
                const cell = document.createElement('td');
                row.appendChild(cell);
            }
        }
        
        comboTable.appendChild(row);
    }
    
    modalBody.appendChild(comboTable);
    
    // Adicionar tudo ao modal
    modalContent.appendChild(modalHeader);
    modalContent.appendChild(modalBody);
    modalOverlay.appendChild(modalContent);
    
    // Adicionar o modal à página
    document.body.appendChild(modalOverlay);
}

// Adicionar listeners para as células da tabela
function adicionarListenersCelulas() {
    const células = document.querySelectorAll('.combo-cell');
    
    células.forEach((célula, index) => {
        // Calcular qual linha e coluna (dígito) esta célula representa
        const linha = Math.floor(index / 5);
        const coluna = index % 5;
        
        // Não adicionar listener para linhas 8-10 (índices 7-9, que são "?")
        if (linha >= 7) return;
        
        célula.style.cursor = 'pointer';
        célula.title = 'Clique para ver todas as combinações';
        
        célula.addEventListener('click', () => {
            mostrarModalCombinacoes(coluna, linha + 1);
        });
    });
}

// Adicionar os listeners após carregar a tabela
document.addEventListener('DOMContentLoaded', () => {
    // Aguarde a tabela ser preenchida
    setTimeout(() => {
        adicionarListenersCelulas();
    }, 500);
});

// Adicionar listener para atualizar os listeners das células quando a tabela é atualizada
atualizarBtn.addEventListener('click', () => {
    setTimeout(() => {
        adicionarListenersCelulas();
    }, 500);
});
// Elementos do DOM
const tabelaCorpo = document.getElementById('estatisticas-corpo');
const tamanhoTabelaSelect = document.getElementById('tamanho-tabela');
const atualizarBtn = document.getElementById('atualizar-tabela');

// Dados para armazenar as estatísticas
let estatisticasData = [];
let combinacoesData = {};

// Carregar os dados iniciais ao carregar a página
document.addEventListener('DOMContentLoaded', () => {
    // Carregar estatísticas para todos os tamanhos
    carregarEstatisticas();
    
    // Pré-carregar combinações para todos os tamanhos de 1 a 10
    for (let i = 1; i <= 10; i++) {
        carregarCombinacoes(i);
    }
});

// Event listener para o botão de atualizar
atualizarBtn.addEventListener('click', () => {
    atualizarTabelaComDados();
});

// Função para carregar estatísticas da API
async function carregarEstatisticas() {
    try {
        const response = await fetch('/api/estatisticas');
        if (response.ok) {
            estatisticasData = await response.json();
            preencherTabelaEstatisticas();
        } else {
            console.error('Erro ao carregar estatísticas:', response.status);
        }
    } catch (error) {
        console.error('Erro ao carregar estatísticas:', error);
    }
}

// Função para carregar combinações para um tamanho específico
async function carregarCombinacoes(tamanho) {
    try {
        const response = await fetch(`/api/combinacoes/${tamanho}`);
        if (response.ok) {
            const data = await response.json();
            combinacoesData[tamanho] = data;
            // Atualizar a tabela com as combinações carregadas
            atualizarCombinacoes(tamanho);
        } else {
            console.error(`Erro ao carregar combinações para tamanho ${tamanho}:`, response.status);
        }
    } catch (error) {
        console.error(`Erro ao carregar combinações para tamanho ${tamanho}:`, error);
    }
}

// Função para gerar todas as combinações de tamanho k
function gerarTodasCombinacoes(k) {
    const digitos = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    const resultado = [];
    
    function combinar(inicio, atual) {
        if (atual.length === k) {
            resultado.push([...atual]);
            return;
        }
        
        for (let i = inicio; i < digitos.length; i++) {
            atual.push(digitos[i]);
            combinar(i + 1, atual);
            atual.pop();
        }
    }
    
    combinar(0, []);
    return resultado;
}

// Função para preencher a tabela com estatísticas
function preencherTabelaEstatisticas() {
    if (!estatisticasData || estatisticasData.length === 0) return;
    
    tabelaCorpo.innerHTML = '';
    
    estatisticasData.forEach(item => {
        const row = document.createElement('tr');
        row.setAttribute('data-tamanho', item.tamanho);
        
        // Coluna "Combinações com"
        const colCombCom = document.createElement('td');
        colCombCom.textContent = item.tamanho;
        row.appendChild(colCombCom);
        
        // Coluna "Dígitos" (total de combinações)
        const colDigitos = document.createElement('td');
        colDigitos.textContent = item.total;
        row.appendChild(colDigitos);
        
        // Coluna "Agrupamento com duas dezenas"
        const colAgrupamento = document.createElement('td');
        colAgrupamento.textContent = item.agrupamentos_duas_dezenas;
        row.appendChild(colAgrupamento);
        
        // Coluna "Combinações destas dezenas (agrupada em 2)"
        const colCombAgrupadas = document.createElement('td');
        colCombAgrupadas.textContent = item.combinacoes_agrupadas;
        row.appendChild(colCombAgrupadas);
        
        // Colunas para cada primeiro dígito (0-4)
        for (let i = 0; i <= 4; i++) {
            const colDigito = document.createElement('td');
            colDigito.className = 'combo-cell';
            colDigito.setAttribute('data-digito', i);
            
            // Inicialmente colocamos "Carregando..." até termos os dados reais
            colDigito.textContent = "Carregando...";
            
            row.appendChild(colDigito);
        }
        
        // Coluna "..."
        const colEtc = document.createElement('td');
        colEtc.textContent = 'Mais combinações...';
        colEtc.className = 'etc-cell';
        colEtc.title = 'Clique para ver mais combinações';
        colEtc.style.cursor = 'pointer';
        colEtc.addEventListener('click', () => {
            mostrarTodasCombinacoes(item.tamanho);
        });
        row.appendChild(colEtc);
        
        tabelaCorpo.appendChild(row);
    });
}

// Função para atualizar as células com combinações reais
function atualizarCombinacoes(tamanho) {
    if (!combinacoesData[tamanho]) return;
    
    const data = combinacoesData[tamanho];
    
    // Encontrar a linha correta
    const row = document.querySelector(`tr[data-tamanho="${tamanho}"]`);
    if (!row) return;
    
    // Atualizar as células para cada dígito inicial (0-4)
    for (let i = 0; i <= 4; i++) {
        const cell = row.querySelector(`td[data-digito="${i}"]`);
        if (!cell) continue;
        
        const combsPorDigito = data.por_primeiro_digito[i] || [];
        
        if (combsPorDigito.length > 0) {
            // Mostrar a primeira combinação (ou até 3 se couber)
            const combs = combsPorDigito.slice(0, 1);
            cell.textContent = combs.map(comb => comb.join(',')).join('\n');
            
            // Adicionar evento de clique para mostrar todas as combinações deste dígito
            cell.style.cursor = 'pointer';
            cell.title = 'Clique para ver todas as combinações';
            
            // Remover ouvinte antigo se existir para evitar duplicação
            const oldClone = cell.cloneNode(true);
            cell.parentNode.replaceChild(oldClone, cell);
            
            oldClone.addEventListener('click', () => {
                mostrarCombinacoesPorDigito(tamanho, i);
            });
        } else {
            cell.textContent = 'N/A';
        }
    }
}

// Função para mostrar modal com todas as combinações por dígito
function mostrarCombinacoesPorDigito(tamanho, primeiroDigito) {
    if (!combinacoesData[tamanho]) {
        alert('Dados não disponíveis para este tamanho.');
        return;
    }
    
    const data = combinacoesData[tamanho];
    const combsPorDigito = data.por_primeiro_digito[primeiroDigito] || [];
    
    if (combsPorDigito.length === 0) {
        alert('Não há combinações começando com este dígito.');
        return;
    }
    
    // Criar o modal
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';
    
    // Cabeçalho do modal
    const modalHeader = document.createElement('div');
    modalHeader.className = 'modal-header';
    
    const modalTitle = document.createElement('h2');
    modalTitle.textContent = `Combinações com ${tamanho} dígitos começando com ${primeiroDigito}`;
    
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '×';
    closeBtn.className = 'modal-close';
    closeBtn.addEventListener('click', () => {
        document.body.removeChild(modalOverlay);
    });
    
    modalHeader.appendChild(modalTitle);
    modalHeader.appendChild(closeBtn);
    
    // Corpo do modal
    const modalBody = document.createElement('div');
    modalBody.className = 'modal-body';
    
    const totalText = document.createElement('p');
    totalText.textContent = `Total de combinações: ${combsPorDigito.length}`;
    modalBody.appendChild(totalText);
    
    // Tabela de combinações
    const comboTable = document.createElement('table');
    comboTable.className = 'combo-table';
    
    // Criar linhas para exibir as combinações em uma grade
    const combsPerRow = 6;
    const rows = Math.ceil(combsPorDigito.length / combsPerRow);
    
    for (let i = 0; i < rows; i++) {
        const row = document.createElement('tr');
        
        for (let j = 0; j < combsPerRow; j++) {
            const index = i * combsPerRow + j;
            
            if (index < combsPorDigito.length) {
                const cell = document.createElement('td');
                cell.textContent = combsPorDigito[index].join(',');
                row.appendChild(cell);
            } else {
                const cell = document.createElement('td');
                row.appendChild(cell);
            }
        }
        
        comboTable.appendChild(row);
    }
    
    modalBody.appendChild(comboTable);
    
    // Adicionar tudo ao modal
    modalContent.appendChild(modalHeader);
    modalContent.appendChild(modalBody);
    modalOverlay.appendChild(modalContent);
    
    // Adicionar o modal à página
    document.body.appendChild(modalOverlay);
}

// Função para mostrar modal com TODAS as combinações de um tamanho específico
function mostrarTodasCombinacoes(tamanho) {
    if (!combinacoesData[tamanho]) {
        alert('Dados não disponíveis para este tamanho.');
        return;
    }
    
    const data = combinacoesData[tamanho];
    
    // Criar o modal
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content modal-large';
    
    // Cabeçalho do modal
    const modalHeader = document.createElement('div');
    modalHeader.className = 'modal-header';
    
    const modalTitle = document.createElement('h2');
    modalTitle.textContent = `Todas as combinações com ${tamanho} dígitos`;
    
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '×';
    closeBtn.className = 'modal-close';
    closeBtn.addEventListener('click', () => {
        document.body.removeChild(modalOverlay);
    });
    
    modalHeader.appendChild(modalTitle);
    modalHeader.appendChild(closeBtn);
    
    // Corpo do modal
    const modalBody = document.createElement('div');
    modalBody.className = 'modal-body';
    
    const totalText = document.createElement('p');
    totalText.textContent = `Total de combinações: ${data.total}`;
    modalBody.appendChild(totalText);
    
    // Criar tabs para cada dígito inicial
    const tabsContainer = document.createElement('div');
    tabsContainer.className = 'tabs-container';
    
    const tabsNav = document.createElement('div');
    tabsNav.className = 'tabs-nav';
    
    const tabsContent = document.createElement('div');
    tabsContent.className = 'tabs-content';
    
    // Criar uma tab para cada dígito inicial
    for (let i = 0; i <= 9; i++) {
        const combsPorDigito = data.por_primeiro_digito[i] || [];
        
        // Skip if no combinations for this digit
        if (combsPorDigito.length === 0) continue;
        
        // Tab button
        const tabBtn = document.createElement('button');
        tabBtn.className = 'tab-btn';
        tabBtn.textContent = `Início ${i} (${combsPorDigito.length})`;
        tabBtn.dataset.target = `tab-${i}`;
        if (i === 0) tabBtn.classList.add('active');
        
        tabBtn.addEventListener('click', (e) => {
            // Remove active class from all buttons
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            // Add active class to clicked button
            e.target.classList.add('active');
            
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => content.style.display = 'none');
            // Show the target tab content
            document.getElementById(e.target.dataset.target).style.display = 'block';
        });
        
        tabsNav.appendChild(tabBtn);
        
        // Tab content
        const tabContent = document.createElement('div');
        tabContent.className = 'tab-content';
        tabContent.id = `tab-${i}`;
        tabContent.style.display = i === 0 ? 'block' : 'none';
        
        // Create table for combinations
        const comboTable = document.createElement('table');
        comboTable.className = 'combo-table';
        
        // Create rows to display combinations in a grid
        const combsPerRow = 6;
        const rows = Math.ceil(combsPorDigito.length / combsPerRow);
        
        for (let j = 0; j < rows; j++) {
            const row = document.createElement('tr');
            
            for (let k = 0; k < combsPerRow; k++) {
                const index = j * combsPerRow + k;
                
                if (index < combsPorDigito.length) {
                    const cell = document.createElement('td');
                    cell.textContent = combsPorDigito[index].join(',');
                    row.appendChild(cell);
                } else {
                    const cell = document.createElement('td');
                    row.appendChild(cell);
                }
            }
            
            comboTable.appendChild(row);
        }
        
        tabContent.appendChild(comboTable);
        tabsContent.appendChild(tabContent);
    }
    
    tabsContainer.appendChild(tabsNav);
    tabsContainer.appendChild(tabsContent);
    modalBody.appendChild(tabsContainer);
    
    // Adicionar tudo ao modal
    modalContent.appendChild(modalHeader);
    modalContent.appendChild(modalBody);
    modalOverlay.appendChild(modalContent);
    
    // Adicionar o modal à página
    document.body.appendChild(modalOverlay);
}

// Função para atualizar a tabela com os dados de combinações específicas
function atualizarTabelaComDados() {
    const tamanho = parseInt(tamanhoTabelaSelect.value);
    if (tamanho >= 1 && tamanho <= 10) {
        // Se já não temos esses dados, temos que carregá-los
        if (!combinacoesData[tamanho]) {
            carregarCombinacoes(tamanho);
        } else {
            // Caso contrário, apenas atualizamos a exibição
            atualizarCombinacoes(tamanho);
        }
    }
}