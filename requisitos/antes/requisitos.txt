combinacoes-app/
├── app.py              # Arquivo principal do Flask
├── static/             # Arquivos estáticos
│   ├── css/
│   │   └── style.css   # Estilos da aplicação
│   └── js/
│       └── main.js     # JavaScript da aplicação
├── templates/          # Templates HTML
│   └── index.html      # Página principal
├── requirements.txt    # Dependências do projeto
└── README.md           # Documentação básica

from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
	
	<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerador de Combinações de Dígitos</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Gerador de Combinações de Dígitos</h1>
        <div class="controls">
            <label for="tamanho">Tamanho do grupo:</label>
            <select id="tamanho">
                <option value="1">1 dígito</option>
                <option value="2">2 dígitos</option>
                <option value="3" selected>3 dígitos</option>
                <option value="4">4 dígitos</option>
                <option value="5">5 dígitos</option>
                <option value="6">6 dígitos</option>
                <option value="7">7 dígitos</option>
            </select>
            <button id="gerar">Gerar Combinações</button>
        </div>
        
        <div class="results" id="results">
            <h2 id="resultado-titulo"></h2>
            <div class="info" id="total-info"></div>
            <div class="combs-container" id="combinacoes"></div>
            <div class="pagination">
                <button id="anterior" disabled>Anterior</button>
                <button id="proximo" disabled>Próximo</button>
            </div>
            <div class="info" id="pagina-info"></div>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

// Elementos do DOM
const tamanhoSelect = document.getElementById('tamanho');
const gerarBtn = document.getElementById('gerar');
const resultadoTitulo = document.getElementById('resultado-titulo');
const totalInfo = document.getElementById('total-info');
const combinacoesContainer = document.getElementById('combinacoes');
const anteriorBtn = document.getElementById('anterior');
const proximoBtn = document.getElementById('proximo');
const paginaInfo = document.getElementById('pagina-info');

// Variáveis para controle da paginação
let todasCombinacoes = [];
let paginaAtual = 1;
const itensPorPagina = 30;

// Função para gerar combinações
function gerarCombinacoes(conjunto, tamanho) {
    const combinacoes = [];
    
    function combinar(inicio, atual) {
        if (atual.length === tamanho) {
            combinacoes.push([...atual]);
            return;
        }
        
        for (let i = inicio; i < conjunto.length; i++) {
            atual.push(conjunto[i]);
            combinar(i + 1, atual);
            atual.pop();
        }
    }
    
    combinar(0, []);
    return combinacoes;
}

// Função para mostrar combinações na página atual
function mostrarCombinacoes() {
    combinacoesContainer.innerHTML = '';
    
    const inicio = (paginaAtual - 1) * itensPorPagina;
    const fim = Math.min(inicio + itensPorPagina, todasCombinacoes.length);
    
    for (let i = inicio; i < fim; i++) {
        const combDiv = document.createElement('div');
        combDiv.classList.add('comb-item');
        combDiv.textContent = todasCombinacoes[i].join(',');
        combinacoesContainer.appendChild(combDiv);
    }
    
    // Atualizar informações de paginação
    paginaInfo.textContent = `Página ${paginaAtual} de ${Math.ceil(todasCombinacoes.length / itensPorPagina)}`;
    anteriorBtn.disabled = paginaAtual === 1;
    proximoBtn.disabled = paginaAtual === Math.ceil(todasCombinacoes.length / itensPorPagina);
}

// Event listeners
gerarBtn.addEventListener('click', () => {
    const tamanho = parseInt(tamanhoSelect.value);
    const digitos = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    
    // Gerar todas as combinações
    todasCombinacoes = gerarCombinacoes(digitos, tamanho);
    
    // Resetar paginação
    paginaAtual = 1;
    
    // Atualizar interface
    resultadoTitulo.textContent = `Combinações com ${tamanho} dígito(s)`;
    totalInfo.textContent = `Total de combinações: ${todasCombinacoes.length}`;
    
    // Mostrar combinações
    mostrarCombinacoes();
});

anteriorBtn.addEventListener('click', () => {
    if (paginaAtual > 1) {
        paginaAtual--;
        mostrarCombinacoes();
    }
});

proximoBtn.addEventListener('click', () => {
    if (paginaAtual < Math.ceil(todasCombinacoes.length / itensPorPagina)) {
        paginaAtual++;
        mostrarCombinacoes();
    }
});

body {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f5f5f5;
}
h1 {
    color: #333;
    text-align: center;
}
.container {
    background-color: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.controls {
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 10px;
}
label {
    font-weight: bold;
}
select, button {
    padding: 8px 12px;
    border-radius: 4px;
    border: 1px solid #ccc;
}
button {
    background-color: #4CAF50;
    color: white;
    cursor: pointer;
    border: none;
}
button:hover {
    background-color: #45a049;
}
.results {
    margin-top: 20px;
}
.combs-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 10px;
    margin-top: 10px;
}
.comb-item {
    background-color: #e9f5ff;
    border-radius: 4px;
    padding: 8px;
    text-align: center;
    font-family: monospace;
    border: 1px solid #ccc;
}
.pagination {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    gap: 10px;
}
.pagination button {
    width: 100px;
}
.info {
    text-align: center;
    margin-top: 10px;
    color: #666;
}

Flask==2.0.1
Werkzeug==2.0.1
